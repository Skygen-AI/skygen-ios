//
//  MockData.swift
//  SkyGen
//
//  Mock data for all app sections
//

import Foundation

// MARK: - Mock Data Manager
class MockDataManager: ObservableObject {
    static let shared = MockDataManager()
    
    @Published var isUsingMockData = true
    
    private init() {}
    
    // MARK: - Chat Data
    func getChats() -> [MockChat] {
        return [
            MockChat(
                id: "chat-1",
                title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                lastMessage: "–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
                timestamp: Date().addingTimeInterval(-3600),
                messageCount: 15,
                isPinned: true,
                folder: nil
            ),
            MockChat(
                id: "chat-2", 
                title: "–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤",
                lastMessage: "–ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –ª–æ–≥–∞—Ö...",
                timestamp: Date().addingTimeInterval(-7200),
                messageCount: 8,
                isPinned: false,
                folder: "–†–∞–±–æ—Ç–∞"
            ),
            MockChat(
                id: "chat-3",
                title: "Backup —Å–∏—Å—Ç–µ–º—ã",
                lastMessage: "–°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                timestamp: Date().addingTimeInterval(-86400),
                messageCount: 23,
                isPinned: false,
                folder: "–°–∏—Å—Ç–µ–º—ã"
            ),
            MockChat(
                id: "chat-4",
                title: "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                lastMessage: "CPU –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –Ω–æ—Ä–º–µ",
                timestamp: Date().addingTimeInterval(-172800),
                messageCount: 41,
                isPinned: true,
                folder: nil
            )
        ]
    }
    
    func getChat(id: String) -> MockChat? {
        return getChats().first { $0.id == id }
    }
    
    func getMessages(for chatId: String) -> [MockMessage] {
        // Different message sets for different chats
        switch chatId {
        case "chat-1":
            return [
                MockMessage(
                    id: "msg-1",
                    content: "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π —É–º–Ω–æ–≥–æ –¥–æ–º–∞?",
                    isFromUser: true,
                    timestamp: Date().addingTimeInterval(-3600),
                    type: .text
                ),
                MockMessage(
                    id: "msg-2",
                    content: "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ —Ç—ã —Å–ø—Ä–æ—Å–∏–ª. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤, —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º —Å–∏—Å—Ç–µ–º—ã. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                    isFromUser: false,
                    timestamp: Date().addingTimeInterval(-3590),
                    type: .text
                ),
                MockMessage(
                    id: "msg-3",
                    content: "–•–æ—á—É –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–∞ –≤ –ø—Ä–∏—Ö–æ–∂–µ–π –∫–æ–≥–¥–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –¥–≤–µ—Ä—å",
                    isFromUser: true,
                    timestamp: Date().addingTimeInterval(-3400),
                    type: .text
                ),
                MockMessage(
                    id: "msg-4",
                    content: "–û—Ç–ª–∏—á–Ω–æ! –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è:\n\n1. –î–∞—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–≤–µ—Ä–∏\n2. –£–º–Ω–∞—è –ª–∞–º–ø–æ—á–∫–∞ –∏–ª–∏ –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å\n3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è\n\n–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞?",
                    isFromUser: false,
                    timestamp: Date().addingTimeInterval(-3390),
                    type: .text
                ),
                MockMessage(
                    id: "msg-5",
                    content: "–î–∞, –¥–∞—Ç—á–∏–∫ –µ—Å—Ç—å. –ê –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤?",
                    isFromUser: true,
                    timestamp: Date().addingTimeInterval(-3200),
                    type: .text
                ),
                MockMessage(
                    id: "msg-6",
                    content: "–ö–æ–Ω–µ—á–Ω–æ! –í–æ—Ç —Ç–≤–æ–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:",
                    isFromUser: false,
                    timestamp: Date().addingTimeInterval(-3190),
                    type: .text
                ),
                MockMessage(
                    id: "msg-7",
                    content: "üè† **–î–æ–º–∞—à–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:**\n‚Ä¢ –î–∞—Ç—á–∏–∫ –¥–≤–µ—Ä–∏ (–ü—Ä–∏—Ö–æ–∂–∞—è) - ‚úÖ –û–Ω–ª–∞–π–Ω\n‚Ä¢ –£–º–Ω–∞—è –ª–∞–º–ø–∞ Philips Hue (–ü—Ä–∏—Ö–æ–∂–∞—è) - ‚úÖ –û–Ω–ª–∞–π–Ω\n‚Ä¢ –í—ã–∫–ª—é—á–∞—Ç–µ–ª—å Xiaomi (–ì–æ—Å—Ç–∏–Ω–∞—è) - ‚ö†Ô∏è –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª\n‚Ä¢ –¢–µ—Ä–º–æ—Å—Ç–∞—Ç Nest - ‚úÖ –û–Ω–ª–∞–π–Ω",
                    isFromUser: false,
                    timestamp: Date().addingTimeInterval(-3180),
                    type: .text
                ),
                MockMessage(
                    id: "msg-8",
                    content: "–û—Ç–ª–∏—á–Ω–æ! –°–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è —Å–≤–µ—Ç–∞?",
                    isFromUser: true,
                    timestamp: Date().addingTimeInterval(-3000),
                    type: .text
                ),
                MockMessage(
                    id: "msg-9",
                    content: "–°–æ–∑–¥–∞—é —Å—Ü–µ–Ω–∞—Ä–∏–π \"–°–≤–µ—Ç –≤ –ø—Ä–∏—Ö–æ–∂–µ–π\"...",
                    isFromUser: false,
                    timestamp: Date().addingTimeInterval(-2990),
                    type: .text,
                    isLoading: true
                )
            ]
            
        case "chat-2":
            return [
                MockMessage(
                    id: "msg-10",
                    content: "–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–µ—Ä–º–æ—Å—Ç–∞—Ç–æ–º Nest",
                    isFromUser: true,
                    timestamp: Date().addingTimeInterval(-1800),
                    type: .text
                ),
                MockMessage(
                    id: "msg-11",
                    content: "–ü–æ–Ω—è–ª, —Ä–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–±–ª–µ–º–µ —Å —Ç–µ—Ä–º–æ—Å—Ç–∞—Ç–æ–º. –ö–∞–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã —Ç—ã –Ω–∞–±–ª—é–¥–∞–µ—à—å?",
                    isFromUser: false,
                    timestamp: Date().addingTimeInterval(-1790),
                    type: .text
                ),
                MockMessage(
                    id: "msg-12",
                    content: "–ù–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    isFromUser: true,
                    timestamp: Date().addingTimeInterval(-1700),
                    type: .text
                ),
                MockMessage(
                    id: "msg-13",
                    content: "–ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞... –ù–∞—à–µ–ª –ø—Ä–æ–±–ª–µ–º—É - –ø–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Wi-Fi. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–æ—É—Ç–µ—Ä –∏–ª–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–µ—Ä–º–æ—Å—Ç–∞—Ç –∫ —Å–µ—Ç–∏.",
                    isFromUser: false,
                    timestamp: Date().addingTimeInterval(-1690),
                    type: .text
                )
            ]
            
        default:
            return [
                MockMessage(
                    id: "msg-welcome",
                    content: "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–º–Ω—ã–º –¥–æ–º–æ–º. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                    isFromUser: false,
                    timestamp: Date().addingTimeInterval(-300),
                    type: .text
                )
            ]
        }
    }
    
    // MARK: - Device Data
    func getDevices() -> [MockDevice] {
        return [
            MockDevice(
                id: "device-1",
                name: "MacBook Pro M3",
                type: .macOS,
                status: .online,
                lastSeen: Date(),
                version: "macOS 14.5",
                ipAddress: "192.168.1.100",
                location: "–û—Ñ–∏—Å"
            ),
            MockDevice(
                id: "device-2",
                name: "Ubuntu Server",
                type: .linux,
                status: .online,
                lastSeen: Date().addingTimeInterval(-300),
                version: "Ubuntu 22.04 LTS",
                ipAddress: "192.168.1.101",
                location: "–î–∞—Ç–∞-—Ü–µ–Ω—Ç—Ä"
            ),
            MockDevice(
                id: "device-3",
                name: "iPhone 15 Pro",
                type: .iOS,
                status: .offline,
                lastSeen: Date().addingTimeInterval(-3600),
                version: "iOS 17.5",
                ipAddress: "192.168.1.102",
                location: "–ú–æ–±–∏–ª—å–Ω—ã–π"
            ),
            MockDevice(
                id: "device-4",
                name: "Windows Workstation",
                type: .windows,
                status: .maintenance,
                lastSeen: Date().addingTimeInterval(-1800),
                version: "Windows 11 Pro",
                ipAddress: "192.168.1.103",
                location: "–û—Ñ–∏—Å"
            )
        ]
    }
    
    func getDevice(id: String) -> MockDevice? {
        return getDevices().first { $0.id == id }
    }
    
    // MARK: - Action Data
    func getActions() -> [MockAction] {
        return [
            MockAction(
                id: "action-1",
                title: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã",
                deviceName: "Ubuntu Server",
                status: .running,
                progress: 0.65,
                startTime: Date().addingTimeInterval(-1800),
                estimatedCompletion: Date().addingTimeInterval(900)
            ),
            MockAction(
                id: "action-2",
                title: "–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞",
                deviceName: "MacBook Pro M3",
                status: .completed,
                progress: 1.0,
                startTime: Date().addingTimeInterval(-7200),
                estimatedCompletion: Date().addingTimeInterval(-3600)
            ),
            MockAction(
                id: "action-3",
                title: "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                deviceName: "Windows Workstation",
                status: .failed,
                progress: 0.3,
                startTime: Date().addingTimeInterval(-3600),
                estimatedCompletion: nil
            ),
            MockAction(
                id: "action-4",
                title: "–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤",
                deviceName: "MacBook Pro M3",
                status: .queued,
                progress: 0.0,
                startTime: nil,
                estimatedCompletion: nil
            )
        ]
    }
    
    func getAction(id: String) -> MockAction? {
        return getActions().first { $0.id == id }
    }
    
    // MARK: - Integration Data
    func getIntegrations() -> [MockIntegration] {
        return [
            MockIntegration(
                id: "integration-1",
                name: "Gmail",
                type: .email,
                status: .connected,
                scope: "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø",
                icon: "envelope",
                description: "–î–æ—Å—Ç—É–ø –∫ –ø–æ—á—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                permissions: ["–ß—Ç–µ–Ω–∏–µ –ø–∏—Å–µ–º", "–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å–µ–º"],
                lastSync: Date().addingTimeInterval(-1800)
            ),
            MockIntegration(
                id: "integration-2",
                name: "Telegram",
                type: .messaging,
                status: .connected,
                scope: "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π",
                icon: "message",
                description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –±—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã",
                permissions: ["–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π", "–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥"],
                lastSync: Date().addingTimeInterval(-300)
            ),
            MockIntegration(
                id: "integration-3",
                name: "Google Calendar",
                type: .calendar,
                status: .expired,
                scope: "–ß—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å",
                icon: "calendar",
                description: "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
                permissions: ["–ß—Ç–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è", "–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π"],
                lastSync: Date().addingTimeInterval(-86400 * 3)
            ),
            MockIntegration(
                id: "integration-4",
                name: "Google Drive",
                type: .storage,
                status: .disconnected,
                scope: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏",
                icon: "folder",
                description: "–•—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π",
                permissions: ["–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤", "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤"],
                lastSync: nil
            )
        ]
    }
    
    func getIntegration(id: String) -> MockIntegration? {
        return getIntegrations().first { $0.id == id }
    }
}

// MARK: - Data Models
struct MockChat: Identifiable, Hashable {
    let id: String
    let title: String
    let lastMessage: String
    let timestamp: Date
    let messageCount: Int
    let isPinned: Bool
    let folder: String?
}

struct MockDevice: Identifiable, Hashable {
    let id: String
    let name: String
    let type: DeviceType
    let status: DeviceStatus
    let lastSeen: Date
    let version: String
    let ipAddress: String
    let location: String
    
    enum DeviceType: String, CaseIterable {
        case macOS = "macOS"
        case iOS = "iOS"
        case linux = "Linux"
        case windows = "Windows"
        case android = "Android"
        
        var icon: String {
            switch self {
            case .macOS: return "desktopcomputer"
            case .iOS: return "iphone"
            case .linux: return "terminal"
            case .windows: return "pc"
            case .android: return "phone.badge.checkmark"
            }
        }
    }
    
    enum DeviceStatus: String, CaseIterable {
        case online = "–û–Ω–ª–∞–π–Ω"
        case offline = "–û—Ñ—Ñ–ª–∞–π–Ω"
        case maintenance = "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"
        case error = "–û—à–∏–±–∫–∞"
        
        var color: String {
            switch self {
            case .online: return "success"
            case .offline: return "textSecondary"
            case .maintenance: return "warning"
            case .error: return "error"
            }
        }
    }
}

struct MockAction: Identifiable, Hashable {
    let id: String
    let title: String
    let deviceName: String
    let status: ActionStatus
    let progress: Double
    let startTime: Date?
    let estimatedCompletion: Date?
    
    enum ActionStatus: String, CaseIterable {
        case queued = "–í –æ—á–µ—Ä–µ–¥–∏"
        case running = "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
        case completed = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
        case failed = "–û—à–∏–±–∫–∞"
        case cancelled = "–û—Ç–º–µ–Ω–µ–Ω–æ"
        
        var color: String {
            switch self {
            case .queued: return "textSecondary"
            case .running: return "accent"
            case .completed: return "success"
            case .failed: return "error"
            case .cancelled: return "textTertiary"
            }
        }
        
        var icon: String {
            switch self {
            case .queued: return "clock"
            case .running: return "play.circle"
            case .completed: return "checkmark.circle"
            case .failed: return "xmark.circle"
            case .cancelled: return "stop.circle"
            }
        }
    }
}

struct MockIntegration: Identifiable, Hashable {
    let id: String
    let name: String
    let type: IntegrationType
    let status: ConnectionStatus
    let scope: String
    let icon: String
    let description: String
    let permissions: [String]
    let lastSync: Date?
    
    // Compatibility property
    var isConnected: Bool {
        return status == .connected
    }
    
    enum IntegrationType: String, CaseIterable {
        case email = "Email"
        case messaging = "–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä"
        case calendar = "–ö–∞–ª–µ–Ω–¥–∞—Ä—å"
        case storage = "–•—Ä–∞–Ω–∏–ª–∏—â–µ"
        case social = "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏"
    }
    
    enum ConnectionStatus: String, CaseIterable {
        case connected = "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ"
        case disconnected = "–û—Ç–∫–ª—é—á–µ–Ω–æ"
        case expired = "–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫"
        case error = "–û—à–∏–±–∫–∞"
        
        var color: String {
            switch self {
            case .connected: return "success"
            case .disconnected: return "textSecondary"
            case .expired: return "warning"
            case .error: return "error"
            }
        }
    }
}

struct MockMessage: Identifiable, Hashable {
    let id: String
    let content: String
    let isFromUser: Bool
    let timestamp: Date
    let type: MessageType
    var isLoading: Bool = false
    
    enum MessageType: String, CaseIterable {
        case text = "text"
        case image = "image"
        case file = "file"
        case action = "action"
        
        var icon: String {
            switch self {
            case .text: return "text.bubble"
            case .image: return "photo"
            case .file: return "doc"
            case .action: return "play.circle"
            }
        }
    }
}
